CCS PCM C Compiler, Version 5.015, 5967               22-May-18 09:05

               Filename:   C:\Users\ASUS\Downloads\BAI 29 - HIEN THI NHIET DO LEN GIAO DIEN MAY TINH\BAI 29 - HIEN THI NHIET DO LEN GIAO DIEN MAY TINH\main.lst

               ROM used:   1629 words (20%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           36 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5E6
0003:  NOP
.................... #include <main.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 48,2A
000D:  DATA C7,29
000E:  DATA A0,26
000F:  DATA CF,24
0010:  DATA 20,2A
0011:  DATA D2,2A
0012:  DATA 4F,27
0013:  DATA 47,00
0014:  DATA 47,2B
0015:  DATA 48,22
0016:  DATA 3A,22
0017:  DATA 2E,2A
0018:  DATA C8,24
0019:  DATA 2E,2A
001A:  DATA 55,17
001B:  DATA CD,2C
001C:  DATA 00,01
*
0166:  MOVF   0B,W
0167:  MOVWF  25
0168:  BCF    0B.7
0169:  BSF    03.5
016A:  BSF    03.6
016B:  BSF    0C.7
016C:  BSF    0C.0
016D:  NOP
016E:  NOP
016F:  BCF    03.5
0170:  BCF    03.6
0171:  BTFSC  25.7
0172:  BSF    0B.7
0173:  BSF    03.6
0174:  MOVF   0C,W
0175:  ANDLW  7F
0176:  BTFSC  03.2
0177:  GOTO   1BA
0178:  BCF    03.6
0179:  MOVWF  25
017A:  BSF    03.6
017B:  MOVF   0D,W
017C:  BCF    03.6
017D:  MOVWF  26
017E:  BSF    03.6
017F:  MOVF   0F,W
0180:  BCF    03.6
0181:  MOVWF  27
0182:  MOVF   25,W
0183:  MOVWF  32
0184:  CALL   142
0185:  MOVF   26,W
0186:  BSF    03.6
0187:  MOVWF  0D
0188:  BCF    03.6
0189:  MOVF   27,W
018A:  BSF    03.6
018B:  MOVWF  0F
018C:  BCF    03.6
018D:  MOVF   0B,W
018E:  MOVWF  28
018F:  BCF    0B.7
0190:  BSF    03.5
0191:  BSF    03.6
0192:  BSF    0C.7
0193:  BSF    0C.0
0194:  NOP
0195:  NOP
0196:  BCF    03.5
0197:  BCF    03.6
0198:  BTFSC  28.7
0199:  BSF    0B.7
019A:  BSF    03.6
019B:  RLF    0C,W
019C:  RLF    0E,W
019D:  ANDLW  7F
019E:  BTFSC  03.2
019F:  GOTO   1BA
01A0:  BCF    03.6
01A1:  MOVWF  25
01A2:  BSF    03.6
01A3:  MOVF   0D,W
01A4:  BCF    03.6
01A5:  MOVWF  26
01A6:  BSF    03.6
01A7:  MOVF   0F,W
01A8:  BCF    03.6
01A9:  MOVWF  27
01AA:  MOVF   25,W
01AB:  MOVWF  32
01AC:  CALL   142
01AD:  MOVF   26,W
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  BCF    03.6
01B1:  MOVF   27,W
01B2:  BSF    03.6
01B3:  MOVWF  0F
01B4:  INCF   0D,F
01B5:  BTFSC  03.2
01B6:  INCF   0F,F
01B7:  BCF    03.6
01B8:  GOTO   166
01B9:  BSF    03.6
01BA:  BCF    03.6
01BB:  RETURN
*
0241:  MOVLW  8E
0242:  MOVWF  77
0243:  MOVF   2F,W
0244:  MOVWF  78
0245:  MOVF   2E,W
0246:  MOVWF  79
0247:  CLRF   7A
0248:  BTFSS  2F.7
0249:  GOTO   24F
024A:  COMF   78,F
024B:  COMF   79,F
024C:  INCF   79,F
024D:  BTFSC  03.2
024E:  INCF   78,F
024F:  MOVF   78,F
0250:  BTFSS  03.2
0251:  GOTO   25C
0252:  MOVF   79,W
0253:  MOVWF  78
0254:  CLRF   79
0255:  MOVLW  08
0256:  SUBWF  77,F
0257:  MOVF   78,F
0258:  BTFSS  03.2
0259:  GOTO   25C
025A:  CLRF   77
025B:  GOTO   265
025C:  BCF    03.0
025D:  BTFSC  78.7
025E:  GOTO   263
025F:  RLF    79,F
0260:  RLF    78,F
0261:  DECF   77,F
0262:  GOTO   25C
0263:  BTFSS  2F.7
0264:  BCF    78.7
*
027A:  MOVF   32,W
027B:  BTFSC  03.2
027C:  GOTO   33F
027D:  MOVWF  3E
027E:  MOVF   36,W
027F:  BTFSC  03.2
0280:  GOTO   33F
0281:  SUBWF  3E,F
0282:  BTFSS  03.0
0283:  GOTO   289
0284:  MOVLW  7F
0285:  ADDWF  3E,F
0286:  BTFSC  03.0
0287:  GOTO   33F
0288:  GOTO   28F
0289:  MOVLW  81
028A:  SUBWF  3E,F
028B:  BTFSS  03.0
028C:  GOTO   33F
028D:  BTFSC  03.2
028E:  GOTO   33F
028F:  MOVF   3E,W
0290:  MOVWF  77
0291:  CLRF   78
0292:  CLRF   79
0293:  CLRF   7A
0294:  CLRF   3D
0295:  MOVF   33,W
0296:  MOVWF  3C
0297:  BSF    3C.7
0298:  MOVF   34,W
0299:  MOVWF  3B
029A:  MOVF   35,W
029B:  MOVWF  3A
029C:  MOVLW  19
029D:  MOVWF  3E
029E:  MOVF   39,W
029F:  SUBWF  3A,F
02A0:  BTFSC  03.0
02A1:  GOTO   2B2
02A2:  MOVLW  01
02A3:  SUBWF  3B,F
02A4:  BTFSC  03.0
02A5:  GOTO   2B2
02A6:  SUBWF  3C,F
02A7:  BTFSC  03.0
02A8:  GOTO   2B2
02A9:  SUBWF  3D,F
02AA:  BTFSC  03.0
02AB:  GOTO   2B2
02AC:  INCF   3D,F
02AD:  INCF   3C,F
02AE:  INCF   3B,F
02AF:  MOVF   39,W
02B0:  ADDWF  3A,F
02B1:  GOTO   2E4
02B2:  MOVF   38,W
02B3:  SUBWF  3B,F
02B4:  BTFSC  03.0
02B5:  GOTO   2CD
02B6:  MOVLW  01
02B7:  SUBWF  3C,F
02B8:  BTFSC  03.0
02B9:  GOTO   2CD
02BA:  SUBWF  3D,F
02BB:  BTFSC  03.0
02BC:  GOTO   2CD
02BD:  INCF   3D,F
02BE:  INCF   3C,F
02BF:  MOVF   38,W
02C0:  ADDWF  3B,F
02C1:  MOVF   39,W
02C2:  ADDWF  3A,F
02C3:  BTFSS  03.0
02C4:  GOTO   2E4
02C5:  INCF   3B,F
02C6:  BTFSS  03.2
02C7:  GOTO   2E4
02C8:  INCF   3C,F
02C9:  BTFSS  03.2
02CA:  GOTO   2E4
02CB:  INCF   3D,F
02CC:  GOTO   2E4
02CD:  MOVF   37,W
02CE:  IORLW  80
02CF:  SUBWF  3C,F
02D0:  BTFSC  03.0
02D1:  GOTO   2E3
02D2:  MOVLW  01
02D3:  SUBWF  3D,F
02D4:  BTFSC  03.0
02D5:  GOTO   2E3
02D6:  INCF   3D,F
02D7:  MOVF   37,W
02D8:  IORLW  80
02D9:  ADDWF  3C,F
02DA:  MOVF   38,W
02DB:  ADDWF  3B,F
02DC:  BTFSS  03.0
02DD:  GOTO   2C1
02DE:  INCF   3C,F
02DF:  BTFSS  03.2
02E0:  GOTO   2C1
02E1:  INCF   3D,F
02E2:  GOTO   2C1
02E3:  BSF    7A.0
02E4:  DECFSZ 3E,F
02E5:  GOTO   2E7
02E6:  GOTO   2F2
02E7:  BCF    03.0
02E8:  RLF    3A,F
02E9:  RLF    3B,F
02EA:  RLF    3C,F
02EB:  RLF    3D,F
02EC:  BCF    03.0
02ED:  RLF    7A,F
02EE:  RLF    79,F
02EF:  RLF    78,F
02F0:  RLF    3F,F
02F1:  GOTO   29E
02F2:  BTFSS  3F.0
02F3:  GOTO   2FA
02F4:  BCF    03.0
02F5:  RRF    78,F
02F6:  RRF    79,F
02F7:  RRF    7A,F
02F8:  RRF    3F,F
02F9:  GOTO   2FD
02FA:  DECF   77,F
02FB:  BTFSC  03.2
02FC:  GOTO   33F
02FD:  BTFSC  3F.7
02FE:  GOTO   326
02FF:  BCF    03.0
0300:  RLF    3A,F
0301:  RLF    3B,F
0302:  RLF    3C,F
0303:  RLF    3D,F
0304:  MOVF   39,W
0305:  SUBWF  3A,F
0306:  BTFSC  03.0
0307:  GOTO   312
0308:  MOVLW  01
0309:  SUBWF  3B,F
030A:  BTFSC  03.0
030B:  GOTO   312
030C:  SUBWF  3C,F
030D:  BTFSC  03.0
030E:  GOTO   312
030F:  SUBWF  3D,F
0310:  BTFSS  03.0
0311:  GOTO   335
0312:  MOVF   38,W
0313:  SUBWF  3B,F
0314:  BTFSC  03.0
0315:  GOTO   31D
0316:  MOVLW  01
0317:  SUBWF  3C,F
0318:  BTFSC  03.0
0319:  GOTO   31D
031A:  SUBWF  3D,F
031B:  BTFSS  03.0
031C:  GOTO   335
031D:  MOVF   37,W
031E:  IORLW  80
031F:  SUBWF  3C,F
0320:  BTFSC  03.0
0321:  GOTO   326
0322:  MOVLW  01
0323:  SUBWF  3D,F
0324:  BTFSS  03.0
0325:  GOTO   335
0326:  INCF   7A,F
0327:  BTFSS  03.2
0328:  GOTO   335
0329:  INCF   79,F
032A:  BTFSS  03.2
032B:  GOTO   335
032C:  INCF   78,F
032D:  BTFSS  03.2
032E:  GOTO   335
032F:  INCF   77,F
0330:  BTFSC  03.2
0331:  GOTO   33F
0332:  RRF    78,F
0333:  RRF    79,F
0334:  RRF    7A,F
0335:  MOVF   33,W
0336:  MOVWF  3E
0337:  MOVF   37,W
0338:  XORWF  3E,F
0339:  BTFSS  3E.7
033A:  GOTO   33D
033B:  BSF    78.7
033C:  GOTO   343
033D:  BCF    78.7
033E:  GOTO   343
033F:  CLRF   77
0340:  CLRF   78
0341:  CLRF   79
0342:  CLRF   7A
*
0357:  MOVF   32,W
0358:  BTFSC  03.2
0359:  GOTO   3C7
035A:  MOVWF  3A
035B:  MOVF   36,W
035C:  BTFSC  03.2
035D:  GOTO   3C7
035E:  ADDWF  3A,F
035F:  BTFSC  03.0
0360:  GOTO   368
0361:  MOVLW  7F
0362:  SUBWF  3A,F
0363:  BTFSS  03.0
0364:  GOTO   3C7
0365:  BTFSC  03.2
0366:  GOTO   3C7
0367:  GOTO   36C
0368:  MOVLW  81
0369:  ADDWF  3A,F
036A:  BTFSC  03.0
036B:  GOTO   3C7
036C:  MOVF   3A,W
036D:  MOVWF  77
036E:  CLRF   78
036F:  CLRF   79
0370:  CLRF   7A
0371:  MOVF   33,W
0372:  MOVWF  3E
0373:  BSF    3E.7
0374:  MOVF   34,W
0375:  MOVWF  3D
0376:  MOVF   35,W
0377:  MOVWF  3C
0378:  MOVLW  18
0379:  MOVWF  3A
037A:  CLRF   3B
037B:  BTFSS  3C.0
037C:  GOTO   395
037D:  MOVF   39,W
037E:  ADDWF  7A,F
037F:  BTFSS  03.0
0380:  GOTO   387
0381:  INCF   79,F
0382:  BTFSS  03.2
0383:  GOTO   387
0384:  INCF   78,F
0385:  BTFSC  03.2
0386:  BSF    3B.7
0387:  MOVF   38,W
0388:  ADDWF  79,F
0389:  BTFSS  03.0
038A:  GOTO   38E
038B:  INCF   78,F
038C:  BTFSC  03.2
038D:  BSF    3B.7
038E:  MOVF   37,W
038F:  MOVWF  34
0390:  BSF    34.7
0391:  MOVF   34,W
0392:  ADDWF  78,F
0393:  BTFSC  03.0
0394:  BSF    3B.7
0395:  RLF    3B,F
0396:  RRF    78,F
0397:  RRF    79,F
0398:  RRF    7A,F
0399:  RRF    3E,F
039A:  RRF    3D,F
039B:  RRF    3C,F
039C:  BCF    03.0
039D:  DECFSZ 3A,F
039E:  GOTO   37A
039F:  MOVLW  01
03A0:  ADDWF  77,F
03A1:  BTFSC  03.0
03A2:  GOTO   3C7
03A3:  BTFSC  78.7
03A4:  GOTO   3AC
03A5:  RLF    3E,F
03A6:  RLF    7A,F
03A7:  RLF    79,F
03A8:  RLF    78,F
03A9:  DECF   77,F
03AA:  BTFSC  03.2
03AB:  GOTO   3C7
03AC:  BTFSS  3E.7
03AD:  GOTO   3BD
03AE:  INCF   7A,F
03AF:  BTFSS  03.2
03B0:  GOTO   3BD
03B1:  INCF   79,F
03B2:  BTFSS  03.2
03B3:  GOTO   3BD
03B4:  INCF   78,F
03B5:  BTFSS  03.2
03B6:  GOTO   3BD
03B7:  RRF    78,F
03B8:  RRF    79,F
03B9:  RRF    7A,F
03BA:  INCF   77,F
03BB:  BTFSC  03.2
03BC:  GOTO   3C7
03BD:  MOVF   33,W
03BE:  MOVWF  3B
03BF:  MOVF   37,W
03C0:  XORWF  3B,F
03C1:  BTFSS  3B.7
03C2:  GOTO   3C5
03C3:  BSF    78.7
03C4:  GOTO   3CB
03C5:  BCF    78.7
03C6:  GOTO   3CB
03C7:  CLRF   77
03C8:  CLRF   78
03C9:  CLRF   79
03CA:  CLRF   7A
03CB:  RETURN
03CC:  MOVF   32,W
03CD:  SUBLW  B6
03CE:  MOVWF  32
03CF:  CLRF   7A
03D0:  MOVF   33,W
03D1:  MOVWF  36
03D2:  BSF    33.7
03D3:  BCF    03.0
03D4:  RRF    33,F
03D5:  RRF    34,F
03D6:  RRF    35,F
03D7:  RRF    7A,F
03D8:  RRF    79,F
03D9:  RRF    78,F
03DA:  RRF    77,F
03DB:  DECFSZ 32,F
03DC:  GOTO   3D3
03DD:  BTFSS  36.7
03DE:  GOTO   3EA
03DF:  COMF   77,F
03E0:  COMF   78,F
03E1:  COMF   79,F
03E2:  COMF   7A,F
03E3:  INCF   77,F
03E4:  BTFSC  03.2
03E5:  INCF   78,F
03E6:  BTFSC  03.2
03E7:  INCF   79,F
03E8:  BTFSC  03.2
03E9:  INCF   7A,F
03EA:  RETURN
03EB:  BTFSC  03.1
03EC:  GOTO   3F0
03ED:  MOVLW  3A
03EE:  MOVWF  04
03EF:  BCF    03.7
03F0:  CLRF   77
03F1:  CLRF   78
03F2:  CLRF   79
03F3:  CLRF   7A
03F4:  CLRF   3A
03F5:  CLRF   3B
03F6:  CLRF   3C
03F7:  CLRF   3D
03F8:  MOVF   39,W
03F9:  IORWF  38,W
03FA:  IORWF  37,W
03FB:  IORWF  36,W
03FC:  BTFSC  03.2
03FD:  GOTO   42E
03FE:  MOVLW  20
03FF:  MOVWF  3E
0400:  BCF    03.0
0401:  RLF    32,F
0402:  RLF    33,F
0403:  RLF    34,F
0404:  RLF    35,F
0405:  RLF    3A,F
0406:  RLF    3B,F
0407:  RLF    3C,F
0408:  RLF    3D,F
0409:  MOVF   39,W
040A:  SUBWF  3D,W
040B:  BTFSS  03.2
040C:  GOTO   417
040D:  MOVF   38,W
040E:  SUBWF  3C,W
040F:  BTFSS  03.2
0410:  GOTO   417
0411:  MOVF   37,W
0412:  SUBWF  3B,W
0413:  BTFSS  03.2
0414:  GOTO   417
0415:  MOVF   36,W
0416:  SUBWF  3A,W
0417:  BTFSS  03.0
0418:  GOTO   428
0419:  MOVF   36,W
041A:  SUBWF  3A,F
041B:  MOVF   37,W
041C:  BTFSS  03.0
041D:  INCFSZ 37,W
041E:  SUBWF  3B,F
041F:  MOVF   38,W
0420:  BTFSS  03.0
0421:  INCFSZ 38,W
0422:  SUBWF  3C,F
0423:  MOVF   39,W
0424:  BTFSS  03.0
0425:  INCFSZ 39,W
0426:  SUBWF  3D,F
0427:  BSF    03.0
0428:  RLF    77,F
0429:  RLF    78,F
042A:  RLF    79,F
042B:  RLF    7A,F
042C:  DECFSZ 3E,F
042D:  GOTO   400
042E:  MOVF   3A,W
042F:  MOVWF  00
0430:  INCF   04,F
0431:  MOVF   3B,W
0432:  MOVWF  00
0433:  INCF   04,F
0434:  MOVF   3C,W
0435:  MOVWF  00
0436:  INCF   04,F
0437:  MOVF   3D,W
0438:  MOVWF  00
0439:  RETURN
043A:  MOVF   04,W
043B:  MOVWF  2A
043C:  MOVF   29,W
043D:  MOVWF  2C
043E:  BTFSC  03.2
043F:  GOTO   459
0440:  MOVF   28,W
0441:  MOVWF  35
0442:  MOVF   27,W
0443:  MOVWF  34
0444:  MOVF   26,W
0445:  MOVWF  33
0446:  MOVF   25,W
0447:  MOVWF  32
0448:  CLRF   39
0449:  CLRF   38
044A:  MOVLW  20
044B:  MOVWF  37
044C:  MOVLW  82
044D:  MOVWF  36
044E:  CALL   357
044F:  MOVF   7A,W
0450:  MOVWF  28
0451:  MOVF   79,W
0452:  MOVWF  27
0453:  MOVF   78,W
0454:  MOVWF  26
0455:  MOVF   77,W
0456:  MOVWF  25
0457:  DECFSZ 2C,F
0458:  GOTO   440
0459:  MOVF   28,W
045A:  MOVWF  35
045B:  MOVF   27,W
045C:  MOVWF  34
045D:  MOVF   26,W
045E:  MOVWF  33
045F:  MOVF   25,W
0460:  MOVWF  32
0461:  CALL   3CC
0462:  MOVF   7A,W
0463:  MOVWF  28
0464:  MOVF   79,W
0465:  MOVWF  27
0466:  MOVF   78,W
0467:  MOVWF  26
0468:  MOVF   77,W
0469:  MOVWF  25
046A:  BTFSS  28.7
046B:  GOTO   479
046C:  DECF   2A,F
046D:  BSF    2A.5
046E:  COMF   25,F
046F:  COMF   26,F
0470:  COMF   27,F
0471:  COMF   28,F
0472:  INCF   25,F
0473:  BTFSC  03.2
0474:  INCF   26,F
0475:  BTFSC  03.2
0476:  INCF   27,F
0477:  BTFSC  03.2
0478:  INCF   28,F
0479:  MOVLW  3B
047A:  MOVWF  31
047B:  MOVLW  9A
047C:  MOVWF  30
047D:  MOVLW  CA
047E:  MOVWF  2F
047F:  CLRF   2E
0480:  MOVLW  0A
0481:  MOVWF  2C
0482:  MOVF   29,W
0483:  BTFSC  03.2
0484:  INCF   2A,F
0485:  BSF    03.1
0486:  MOVLW  25
0487:  MOVWF  04
0488:  BCF    03.7
0489:  MOVF   28,W
048A:  MOVWF  35
048B:  MOVF   27,W
048C:  MOVWF  34
048D:  MOVF   26,W
048E:  MOVWF  33
048F:  MOVF   25,W
0490:  MOVWF  32
0491:  MOVF   31,W
0492:  MOVWF  39
0493:  MOVF   30,W
0494:  MOVWF  38
0495:  MOVF   2F,W
0496:  MOVWF  37
0497:  MOVF   2E,W
0498:  MOVWF  36
0499:  CALL   3EB
049A:  MOVF   78,W
049B:  MOVF   77,F
049C:  BTFSS  03.2
049D:  GOTO   4B1
049E:  INCF   29,W
049F:  SUBWF  2C,W
04A0:  BTFSC  03.2
04A1:  GOTO   4B1
04A2:  MOVF   2A,W
04A3:  BTFSC  03.2
04A4:  GOTO   4B3
04A5:  ANDLW  0F
04A6:  SUBWF  2C,W
04A7:  BTFSC  03.2
04A8:  GOTO   4AB
04A9:  BTFSC  03.0
04AA:  GOTO   4E3
04AB:  BTFSC  2A.7
04AC:  GOTO   4E3
04AD:  BTFSC  2A.6
04AE:  GOTO   4B3
04AF:  MOVLW  20
04B0:  GOTO   4DF
04B1:  MOVLW  20
04B2:  ANDWF  2A,F
04B3:  BTFSS  2A.5
04B4:  GOTO   4C1
04B5:  BCF    2A.5
04B6:  MOVF   29,W
04B7:  BTFSS  03.2
04B8:  DECF   2A,F
04B9:  MOVF   77,W
04BA:  MOVWF  2A
04BB:  MOVLW  2D
04BC:  MOVWF  32
04BD:  CALL   142
04BE:  MOVF   2A,W
04BF:  MOVWF  77
04C0:  CLRF   2A
04C1:  MOVF   29,W
04C2:  SUBWF  2C,W
04C3:  BTFSS  03.2
04C4:  GOTO   4CF
04C5:  MOVF   77,W
04C6:  MOVWF  2A
04C7:  MOVLW  2E
04C8:  MOVWF  32
04C9:  CALL   142
04CA:  MOVF   2A,W
04CB:  MOVWF  77
04CC:  MOVLW  20
04CD:  ANDWF  2A,F
04CE:  MOVLW  00
04CF:  MOVLW  30
04D0:  BTFSS  2A.5
04D1:  GOTO   4DF
04D2:  BCF    2A.5
04D3:  MOVF   29,W
04D4:  BTFSS  03.2
04D5:  DECF   2A,F
04D6:  MOVF   77,W
04D7:  MOVWF  2A
04D8:  MOVLW  2D
04D9:  MOVWF  32
04DA:  CALL   142
04DB:  MOVF   2A,W
04DC:  MOVWF  77
04DD:  CLRF   2A
04DE:  MOVLW  30
04DF:  ADDWF  77,F
04E0:  MOVF   77,W
04E1:  MOVWF  32
04E2:  CALL   142
04E3:  BCF    03.1
04E4:  MOVF   31,W
04E5:  MOVWF  35
04E6:  MOVF   30,W
04E7:  MOVWF  34
04E8:  MOVF   2F,W
04E9:  MOVWF  33
04EA:  MOVF   2E,W
04EB:  MOVWF  32
04EC:  CLRF   39
04ED:  CLRF   38
04EE:  CLRF   37
04EF:  MOVLW  0A
04F0:  MOVWF  36
04F1:  CALL   3EB
04F2:  MOVF   7A,W
04F3:  MOVWF  31
04F4:  MOVF   79,W
04F5:  MOVWF  30
04F6:  MOVF   78,W
04F7:  MOVWF  2F
04F8:  MOVF   77,W
04F9:  MOVWF  2E
04FA:  DECFSZ 2C,F
04FB:  GOTO   485
04FC:  BCF    0A.3
04FD:  BCF    0A.4
04FE:  GOTO   648 (RETURN)
*
0521:  MOVF   04,W
0522:  MOVWF  2A
0523:  MOVF   29,W
0524:  MOVWF  2C
0525:  BTFSC  03.2
0526:  GOTO   540
0527:  MOVF   28,W
0528:  MOVWF  35
0529:  MOVF   27,W
052A:  MOVWF  34
052B:  MOVF   26,W
052C:  MOVWF  33
052D:  MOVF   25,W
052E:  MOVWF  32
052F:  CLRF   39
0530:  CLRF   38
0531:  MOVLW  20
0532:  MOVWF  37
0533:  MOVLW  82
0534:  MOVWF  36
0535:  CALL   357
0536:  MOVF   7A,W
0537:  MOVWF  28
0538:  MOVF   79,W
0539:  MOVWF  27
053A:  MOVF   78,W
053B:  MOVWF  26
053C:  MOVF   77,W
053D:  MOVWF  25
053E:  DECFSZ 2C,F
053F:  GOTO   527
0540:  MOVF   28,W
0541:  MOVWF  35
0542:  MOVF   27,W
0543:  MOVWF  34
0544:  MOVF   26,W
0545:  MOVWF  33
0546:  MOVF   25,W
0547:  MOVWF  32
0548:  CALL   3CC
0549:  MOVF   7A,W
054A:  MOVWF  28
054B:  MOVF   79,W
054C:  MOVWF  27
054D:  MOVF   78,W
054E:  MOVWF  26
054F:  MOVF   77,W
0550:  MOVWF  25
0551:  BTFSS  28.7
0552:  GOTO   560
0553:  DECF   2A,F
0554:  BSF    2A.5
0555:  COMF   25,F
0556:  COMF   26,F
0557:  COMF   27,F
0558:  COMF   28,F
0559:  INCF   25,F
055A:  BTFSC  03.2
055B:  INCF   26,F
055C:  BTFSC  03.2
055D:  INCF   27,F
055E:  BTFSC  03.2
055F:  INCF   28,F
0560:  MOVLW  3B
0561:  MOVWF  31
0562:  MOVLW  9A
0563:  MOVWF  30
0564:  MOVLW  CA
0565:  MOVWF  2F
0566:  CLRF   2E
0567:  MOVLW  0A
0568:  MOVWF  2C
0569:  MOVF   29,W
056A:  BTFSC  03.2
056B:  INCF   2A,F
056C:  BSF    03.1
056D:  MOVLW  25
056E:  MOVWF  04
056F:  BCF    03.7
0570:  MOVF   28,W
0571:  MOVWF  35
0572:  MOVF   27,W
0573:  MOVWF  34
0574:  MOVF   26,W
0575:  MOVWF  33
0576:  MOVF   25,W
0577:  MOVWF  32
0578:  MOVF   31,W
0579:  MOVWF  39
057A:  MOVF   30,W
057B:  MOVWF  38
057C:  MOVF   2F,W
057D:  MOVWF  37
057E:  MOVF   2E,W
057F:  MOVWF  36
0580:  CALL   3EB
0581:  MOVF   78,W
0582:  MOVF   77,F
0583:  BTFSS  03.2
0584:  GOTO   598
0585:  INCF   29,W
0586:  SUBWF  2C,W
0587:  BTFSC  03.2
0588:  GOTO   598
0589:  MOVF   2A,W
058A:  BTFSC  03.2
058B:  GOTO   59A
058C:  ANDLW  0F
058D:  SUBWF  2C,W
058E:  BTFSC  03.2
058F:  GOTO   592
0590:  BTFSC  03.0
0591:  GOTO   5CA
0592:  BTFSC  2A.7
0593:  GOTO   5CA
0594:  BTFSC  2A.6
0595:  GOTO   59A
0596:  MOVLW  20
0597:  GOTO   5C6
0598:  MOVLW  20
0599:  ANDWF  2A,F
059A:  BTFSS  2A.5
059B:  GOTO   5A8
059C:  BCF    2A.5
059D:  MOVF   29,W
059E:  BTFSS  03.2
059F:  DECF   2A,F
05A0:  MOVF   77,W
05A1:  MOVWF  2A
05A2:  MOVLW  2D
05A3:  MOVWF  32
05A4:  CALL   4FF
05A5:  MOVF   2A,W
05A6:  MOVWF  77
05A7:  CLRF   2A
05A8:  MOVF   29,W
05A9:  SUBWF  2C,W
05AA:  BTFSS  03.2
05AB:  GOTO   5B6
05AC:  MOVF   77,W
05AD:  MOVWF  2A
05AE:  MOVLW  2E
05AF:  MOVWF  32
05B0:  CALL   4FF
05B1:  MOVF   2A,W
05B2:  MOVWF  77
05B3:  MOVLW  20
05B4:  ANDWF  2A,F
05B5:  MOVLW  00
05B6:  MOVLW  30
05B7:  BTFSS  2A.5
05B8:  GOTO   5C6
05B9:  BCF    2A.5
05BA:  MOVF   29,W
05BB:  BTFSS  03.2
05BC:  DECF   2A,F
05BD:  MOVF   77,W
05BE:  MOVWF  2A
05BF:  MOVLW  2D
05C0:  MOVWF  32
05C1:  CALL   4FF
05C2:  MOVF   2A,W
05C3:  MOVWF  77
05C4:  CLRF   2A
05C5:  MOVLW  30
05C6:  ADDWF  77,F
05C7:  MOVF   77,W
05C8:  MOVWF  32
05C9:  CALL   4FF
05CA:  BCF    03.1
05CB:  MOVF   31,W
05CC:  MOVWF  35
05CD:  MOVF   30,W
05CE:  MOVWF  34
05CF:  MOVF   2F,W
05D0:  MOVWF  33
05D1:  MOVF   2E,W
05D2:  MOVWF  32
05D3:  CLRF   39
05D4:  CLRF   38
05D5:  CLRF   37
05D6:  MOVLW  0A
05D7:  MOVWF  36
05D8:  CALL   3EB
05D9:  MOVF   7A,W
05DA:  MOVWF  31
05DB:  MOVF   79,W
05DC:  MOVWF  30
05DD:  MOVF   78,W
05DE:  MOVWF  2F
05DF:  MOVF   77,W
05E0:  MOVWF  2E
05E1:  DECFSZ 2C,F
05E2:  GOTO   56C
05E3:  BCF    0A.3
05E4:  BCF    0A.4
05E5:  GOTO   65B (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
.................... //#use rs232(uart1, baud=9600) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_D0,rcv=PIN_D1,bits=8) 
*
04FF:  BSF    03.5
0500:  BCF    08.0
0501:  BCF    03.5
0502:  BCF    08.0
0503:  MOVLW  08
0504:  MOVWF  78
0505:  GOTO   506
0506:  NOP
0507:  BSF    78.7
0508:  GOTO   517
0509:  BCF    78.7
050A:  RRF    32,F
050B:  BTFSC  03.0
050C:  BSF    08.0
050D:  BTFSS  03.0
050E:  BCF    08.0
050F:  BSF    78.6
0510:  GOTO   517
0511:  BCF    78.6
0512:  DECFSZ 78,F
0513:  GOTO   50A
0514:  GOTO   515
0515:  NOP
0516:  BSF    08.0
0517:  MOVLW  A7
0518:  MOVWF  04
0519:  DECFSZ 04,F
051A:  GOTO   519
051B:  GOTO   51C
051C:  BTFSC  78.7
051D:  GOTO   509
051E:  BTFSC  78.6
051F:  GOTO   511
0520:  RETURN
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use delay(clock=4000000) 
*
001D:  MOVLW  33
001E:  MOVWF  04
001F:  BCF    03.7
0020:  MOVF   00,W
0021:  BTFSC  03.2
0022:  GOTO   031
0023:  MOVLW  01
0024:  MOVWF  78
0025:  CLRF   77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 78,F
0029:  GOTO   025
002A:  MOVLW  4A
002B:  MOVWF  77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  GOTO   02F
002F:  DECFSZ 00,F
0030:  GOTO   023
0031:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_D2 
.................... //!#define LCD_ENABLE_PIN     PIN_D3 
.................... //!#define LCD_DATA4          PIN_D4 
.................... //!#define LCD_DATA5          PIN_D5 
.................... //!#define LCD_DATA6          PIN_D6 
.................... //!#define LCD_DATA7          PIN_D7  
.................... #define LCD_RS_PIN            PIN_D7   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN         PIN_D6 
.................... #define LCD_ENABLE_PIN     PIN_D5 
.................... #define LCD_DATA4          PIN_D0 
.................... #define LCD_DATA5          PIN_D1 
.................... #define LCD_DATA6          PIN_D3 
.................... #define LCD_DATA7          PIN_D2 
....................  
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_C1 
.................... //!#define LCD_ENABLE_PIN     PIN_C2 
.................... //!#define LCD_DATA4          PIN_C3 
.................... //!#define LCD_DATA5          PIN_C4 
.................... //!#define LCD_DATA6          PIN_C5 
.................... //!#define LCD_DATA7          PIN_C6 
....................  
.................... /* 
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7   
.................... */ 
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
00E5:  BSF    03.5
00E6:  BCF    08.0
.................... output_drive(LCD_DATA5); 
00E7:  BCF    08.1
.................... output_drive(LCD_DATA6); 
00E8:  BCF    08.3
.................... output_drive(LCD_DATA7); 
00E9:  BCF    08.2
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
00EA:  BCF    08.5
.................... lcd_rs_tris(); 
00EB:  BCF    08.7
.................... lcd_rw_tris(); 
00EC:  BCF    08.6
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
00ED:  BCF    03.5
00EE:  BCF    08.7
00EF:  BSF    03.5
00F0:  BCF    08.7
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
00F1:  BCF    03.5
00F2:  BCF    08.6
00F3:  BSF    03.5
00F4:  BCF    08.6
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00F5:  BCF    03.5
00F6:  BCF    08.5
00F7:  BSF    03.5
00F8:  BCF    08.5
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
00F9:  MOVLW  0F
00FA:  BCF    03.5
00FB:  MOVWF  33
00FC:  CALL   01D
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
00FD:  MOVLW  01
00FE:  MOVWF  25
00FF:  MOVF   25,W
0100:  SUBLW  03
0101:  BTFSS  03.0
0102:  GOTO   10B
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
0103:  MOVLW  03
0104:  MOVWF  3A
0105:  CALL   032
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
0106:  MOVLW  05
0107:  MOVWF  33
0108:  CALL   01D
0109:  INCF   25,F
010A:  GOTO   0FF
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
010B:  MOVLW  02
010C:  MOVWF  3A
010D:  CALL   032
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
010E:  CLRF   25
010F:  MOVF   25,W
0110:  SUBLW  03
0111:  BTFSS  03.0
0112:  GOTO   11C
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0113:  MOVF   25,W
0114:  CALL   004
0115:  MOVWF  26
0116:  CLRF   37
0117:  MOVF   26,W
0118:  MOVWF  38
0119:  CALL   08E
011A:  INCF   25,F
011B:  GOTO   10F
011C:  BCF    0A.3
011D:  BCF    0A.4
011E:  GOTO   5FF (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
0091:  BSF    08.0
.................... output_float(LCD_DATA5); 
0092:  BSF    08.1
.................... output_float(LCD_DATA6); 
0093:  BSF    08.3
.................... output_float(LCD_DATA7); 
0094:  BSF    08.2
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
0095:  BCF    03.5
0096:  BSF    08.6
0097:  BSF    03.5
0098:  BCF    08.6
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0099:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
009A:  BCF    03.5
009B:  BSF    08.5
009C:  BSF    03.5
009D:  BCF    08.5
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
009E:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
009F:  BCF    03.5
00A0:  CALL   05D
00A1:  MOVF   78,W
00A2:  MOVWF  3A
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00A3:  BCF    08.5
00A4:  BSF    03.5
00A5:  BCF    08.5
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00A6:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
00A7:  BCF    03.5
00A8:  BSF    08.5
00A9:  BSF    03.5
00AA:  BCF    08.5
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00AB:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
00AC:  BCF    03.5
00AD:  CALL   05D
00AE:  MOVF   78,W
00AF:  MOVWF  39
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
00B0:  BCF    08.5
00B1:  BSF    03.5
00B2:  BCF    08.5
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
00B3:  BCF    08.0
.................... output_drive(LCD_DATA5); 
00B4:  BCF    08.1
.................... output_drive(LCD_DATA6); 
00B5:  BCF    08.3
.................... output_drive(LCD_DATA7); 
00B6:  BCF    08.2
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
00B7:  BCF    03.5
00B8:  SWAPF  3A,W
00B9:  MOVWF  77
00BA:  MOVLW  F0
00BB:  ANDWF  77,F
00BC:  MOVF   77,W
00BD:  IORWF  39,W
00BE:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
*
005D:  CLRF   3B
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
005E:  BSF    03.5
005F:  BSF    08.0
0060:  MOVLW  00
0061:  BCF    03.5
0062:  BTFSC  08.0
0063:  MOVLW  01
0064:  IORWF  3B,F
.................... n |= input(LCD_DATA5) << 1; 
0065:  BSF    03.5
0066:  BSF    08.1
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSC  08.1
006A:  MOVLW  01
006B:  MOVWF  77
006C:  BCF    03.0
006D:  RLF    77,F
006E:  MOVF   77,W
006F:  IORWF  3B,F
.................... n |= input(LCD_DATA6) << 2; 
0070:  BSF    03.5
0071:  BSF    08.3
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  08.3
0075:  MOVLW  01
0076:  MOVWF  77
0077:  RLF    77,F
0078:  RLF    77,F
0079:  MOVLW  FC
007A:  ANDWF  77,F
007B:  MOVF   77,W
007C:  IORWF  3B,F
.................... n |= input(LCD_DATA7) << 3; 
007D:  BSF    03.5
007E:  BSF    08.2
007F:  MOVLW  00
0080:  BCF    03.5
0081:  BTFSC  08.2
0082:  MOVLW  01
0083:  MOVWF  77
0084:  RLF    77,F
0085:  RLF    77,F
0086:  RLF    77,F
0087:  MOVLW  F8
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  3B,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
008B:  MOVF   3B,W
008C:  MOVWF  78
008D:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
008E:  BCF    08.7
008F:  BSF    03.5
0090:  BCF    08.7
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
00BF:  MOVF   78,W
00C0:  MOVWF  39
00C1:  BTFSS  39.7
00C2:  GOTO   0C5
00C3:  BSF    03.5
00C4:  GOTO   091
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
00C5:  MOVF   37,F
00C6:  BTFSS  03.2
00C7:  GOTO   0CA
00C8:  BCF    08.7
00C9:  GOTO   0CB
00CA:  BSF    08.7
00CB:  BSF    03.5
00CC:  BCF    08.7
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00CD:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
00CE:  BCF    03.5
00CF:  BCF    08.6
00D0:  BSF    03.5
00D1:  BCF    08.6
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
00D2:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
00D3:  BCF    03.5
00D4:  BCF    08.5
00D5:  BSF    03.5
00D6:  BCF    08.5
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
00D7:  BCF    03.5
00D8:  SWAPF  38,W
00D9:  MOVWF  39
00DA:  MOVLW  0F
00DB:  ANDWF  39,F
00DC:  MOVF   39,W
00DD:  MOVWF  3A
00DE:  CALL   032
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
00DF:  MOVF   38,W
00E0:  ANDLW  0F
00E1:  MOVWF  39
00E2:  MOVWF  3A
00E3:  CALL   032
00E4:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0032:  BTFSC  3A.0
0033:  GOTO   036
0034:  BCF    08.0
0035:  GOTO   037
0036:  BSF    08.0
0037:  BSF    03.5
0038:  BCF    08.0
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
0039:  BCF    03.5
003A:  BTFSC  3A.1
003B:  GOTO   03E
003C:  BCF    08.1
003D:  GOTO   03F
003E:  BSF    08.1
003F:  BSF    03.5
0040:  BCF    08.1
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
0041:  BCF    03.5
0042:  BTFSC  3A.2
0043:  GOTO   046
0044:  BCF    08.3
0045:  GOTO   047
0046:  BSF    08.3
0047:  BSF    03.5
0048:  BCF    08.3
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
0049:  BCF    03.5
004A:  BTFSC  3A.3
004B:  GOTO   04E
004C:  BCF    08.2
004D:  GOTO   04F
004E:  BSF    08.2
004F:  BSF    03.5
0050:  BCF    08.2
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0051:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
0052:  BCF    03.5
0053:  BSF    08.5
0054:  BSF    03.5
0055:  BCF    08.5
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
0056:  GOTO   057
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
0057:  BCF    03.5
0058:  BCF    08.5
0059:  BSF    03.5
005A:  BCF    08.5
005B:  BCF    03.5
005C:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
011F:  DECFSZ 34,W
0120:  GOTO   123
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
0121:  CLRF   35
0122:  GOTO   137
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
0123:  MOVF   34,W
0124:  SUBLW  02
0125:  BTFSS  03.2
0126:  GOTO   12A
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
0127:  MOVLW  40
0128:  MOVWF  35
0129:  GOTO   137
.................... else if(y==3) 
012A:  MOVF   34,W
012B:  SUBLW  03
012C:  BTFSS  03.2
012D:  GOTO   131
....................    address=lcd_line_three;      
012E:  MOVLW  14
012F:  MOVWF  35
0130:  GOTO   137
.................... else if(y==4) 
0131:  MOVF   34,W
0132:  SUBLW  04
0133:  BTFSS  03.2
0134:  GOTO   137
....................    address=lcd_line_four;    
0135:  MOVLW  54
0136:  MOVWF  35
....................  
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).       
0137:  MOVLW  01
0138:  SUBWF  33,W
0139:  ADDWF  35,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
013A:  MOVF   35,W
013B:  IORLW  80
013C:  MOVWF  36
013D:  CLRF   37
013E:  MOVF   36,W
013F:  MOVWF  38
0140:  CALL   08E
0141:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
0142:  MOVF   32,W
0143:  XORLW  0C
0144:  BTFSC  03.2
0145:  GOTO   14D
0146:  XORLW  06
0147:  BTFSC  03.2
0148:  GOTO   155
0149:  XORLW  02
014A:  BTFSC  03.2
014B:  GOTO   15B
014C:  GOTO   160
....................    { 
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
014D:  CLRF   37
014E:  MOVLW  01
014F:  MOVWF  38
0150:  CALL   08E
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
0151:  MOVLW  02
0152:  MOVWF  33
0153:  CALL   01D
....................       break; 
0154:  GOTO   165
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
0155:  MOVLW  01
0156:  MOVWF  33
0157:  MOVLW  02
0158:  MOVWF  34
0159:  CALL   11F
....................       break; 
015A:  GOTO   165
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
015B:  CLRF   37
015C:  MOVLW  10
015D:  MOVWF  38
015E:  CALL   08E
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
015F:  GOTO   165
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
0160:  MOVLW  01
0161:  MOVWF  37
0162:  MOVF   32,W
0163:  MOVWF  38
0164:  CALL   08E
....................       break; 
....................    } 
0165:  RETURN
.................... }       
.................... // ***************************************************    
....................  
.................... #include <DS18B20.c> 
.................... #ifndef DS18B20_C 
.................... #define DS18B20_C 
.................... #include "one_wire_td.c" 
.................... #ifndef ONE_WIRE_C 
.................... #define ONE_WIRE_C 
.................... #define ONE_WIRE_PIN PIN_E2 
....................  
....................  
.................... void onewire_reset()  
.................... { 
....................     output_low(ONE_WIRE_PIN);       // keo chan onewire xuong muc thap cho nhan du lieu 
*
01C9:  BSF    03.5
01CA:  BCF    09.2
01CB:  BCF    03.5
01CC:  BCF    09.2
....................     delay_us(500); //cho 500us 
01CD:  MOVLW  A6
01CE:  MOVWF  77
01CF:  DECFSZ 77,F
01D0:  GOTO   1CF
01D1:  NOP
....................     output_float(ONE_WIRE_PIN);      
01D2:  BSF    03.5
01D3:  BSF    09.2
....................     delay_us(500);                    
01D4:  MOVLW  A6
01D5:  MOVWF  77
01D6:  DECFSZ 77,F
01D7:  GOTO   1D6
01D8:  NOP
....................     output_float(ONE_WIRE_PIN); 
01D9:  BSF    09.2
01DA:  BCF    03.5
01DB:  RETURN
.................... } 
....................  
.................... void onewire_write(int8 data) { 
....................     int8 count; 
....................  
....................     for(count = 0; count < 8; ++count) { 
01DC:  CLRF   2F
01DD:  MOVF   2F,W
01DE:  SUBLW  07
01DF:  BTFSS  03.0
01E0:  GOTO   1F9
....................         output_low(ONE_WIRE_PIN); 
01E1:  BSF    03.5
01E2:  BCF    09.2
01E3:  BCF    03.5
01E4:  BCF    09.2
....................         delay_us(2);                 
01E5:  GOTO   1E6
....................         output_bit(ONE_WIRE_PIN, shift_right(&data, 1, 0));  
01E6:  BCF    03.0
01E7:  RRF    2E,F
01E8:  BTFSC  03.0
01E9:  GOTO   1EC
01EA:  BCF    09.2
01EB:  GOTO   1ED
01EC:  BSF    09.2
01ED:  BSF    03.5
01EE:  BCF    09.2
....................         delay_us(60);                
01EF:  MOVLW  13
01F0:  MOVWF  77
01F1:  DECFSZ 77,F
01F2:  GOTO   1F1
01F3:  GOTO   1F4
....................         output_float(ONE_WIRE_PIN);  
01F4:  BSF    09.2
....................         delay_us(2);                 
01F5:  GOTO   1F6
01F6:  BCF    03.5
01F7:  INCF   2F,F
01F8:  GOTO   1DD
....................     } 
01F9:  RETURN
.................... } 
....................  
....................  
.................... int onewire_read() { 
....................     int count, data; 
....................  
....................     for(count = 0; count < 8; ++count) { 
01FA:  CLRF   2E
01FB:  MOVF   2E,W
01FC:  SUBLW  07
01FD:  BTFSS  03.0
01FE:  GOTO   21A
....................         output_low(ONE_WIRE_PIN);//keo chan onewire xuong muc thap de doc du lieu o khe thoi gian 
01FF:  BSF    03.5
0200:  BCF    09.2
0201:  BCF    03.5
0202:  BCF    09.2
....................         delay_us(2);                // cho 2us 
0203:  GOTO   204
....................         output_float(ONE_WIRE_PIN);   
0204:  BSF    03.5
0205:  BSF    09.2
....................         delay_us(8);                 
0206:  MOVLW  02
0207:  MOVWF  77
0208:  DECFSZ 77,F
0209:  GOTO   208
020A:  NOP
....................         shift_right(&data, 1, input(ONE_WIRE_PIN)); // xuat ket qua  
020B:  BSF    09.2
020C:  BCF    03.5
020D:  BTFSC  09.2
020E:  GOTO   211
020F:  BCF    03.0
0210:  GOTO   212
0211:  BSF    03.0
0212:  RRF    2F,F
....................         delay_us(120);              // cho den khi doc xong 
0213:  MOVLW  27
0214:  MOVWF  77
0215:  DECFSZ 77,F
0216:  GOTO   215
0217:  GOTO   218
0218:  INCF   2E,F
0219:  GOTO   1FB
....................     } 
....................     return data; 
021A:  MOVF   2F,W
021B:  MOVWF  78
021C:  RETURN
.................... }  
....................  
.................... #endif  
....................  
.................... float ds18b20_read(); 
.................... void ds18b20_configure(int8 TH, int8 TL, int8 config); 
....................  
.................... /* 
....................  * ds1820_read() 
....................  * Description: reads the ds18x20 device on the 1-wire bus and returns 
....................  *              the temperature 
....................  */ 
....................   
.................... float ds18b20_read() { 
021D:  CLRF   25
....................     int8 busy=0, temp1, temp2; 
....................     signed int16 temp3; 
....................     float result; 
....................     onewire_reset(); 
021E:  CALL   1C9
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
021F:  MOVLW  CC
0220:  MOVWF  2E
0221:  CALL   1DC
....................     onewire_write(0x44);            //Start temperature conversion 
0222:  MOVLW  44
0223:  MOVWF  2E
0224:  CALL   1DC
....................     while(busy == 0)                //Wait while busy (bus is low) 
0225:  MOVF   25,F
0226:  BTFSS  03.2
0227:  GOTO   22C
....................         busy = onewire_read(); 
0228:  CALL   1FA
0229:  MOVF   78,W
022A:  MOVWF  25
022B:  GOTO   225
....................     onewire_reset(); 
022C:  CALL   1C9
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
022D:  MOVLW  CC
022E:  MOVWF  2E
022F:  CALL   1DC
....................     onewire_write(0xBE);            //Read scratchpad 
0230:  MOVLW  BE
0231:  MOVWF  2E
0232:  CALL   1DC
....................     temp1 = onewire_read(); 
0233:  CALL   1FA
0234:  MOVF   78,W
0235:  MOVWF  26
....................     temp2 = onewire_read(); 
0236:  CALL   1FA
0237:  MOVF   78,W
0238:  MOVWF  27
....................     temp3 = make16(temp2, temp1); 
0239:  MOVF   27,W
023A:  MOVWF  29
023B:  MOVF   26,W
023C:  MOVWF  28
....................      //result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution 
....................     result = (float) temp3 / 16.0;    //Calculation for DS18B20 with 0.1 deg C resolution 
023D:  MOVF   29,W
023E:  MOVWF  2F
023F:  MOVF   28,W
0240:  MOVWF  2E
*
0265:  MOVF   7A,W
0266:  MOVWF  31
0267:  MOVF   79,W
0268:  MOVWF  30
0269:  MOVF   78,W
026A:  MOVWF  2F
026B:  MOVF   77,W
026C:  MOVWF  2E
026D:  MOVF   31,W
026E:  MOVWF  35
026F:  MOVF   30,W
0270:  MOVWF  34
0271:  MOVF   2F,W
0272:  MOVWF  33
0273:  MOVF   2E,W
0274:  MOVWF  32
0275:  CLRF   39
0276:  CLRF   38
0277:  CLRF   37
0278:  MOVLW  83
0279:  MOVWF  36
*
0343:  MOVF   7A,W
0344:  MOVWF  2D
0345:  MOVF   79,W
0346:  MOVWF  2C
0347:  MOVF   78,W
0348:  MOVWF  2B
0349:  MOVF   77,W
034A:  MOVWF  2A
....................     delay_ms(200);     // 
034B:  MOVLW  C8
034C:  MOVWF  33
034D:  CALL   01D
....................     return(result); 
034E:  MOVF   2A,W
034F:  MOVWF  77
0350:  MOVF   2B,W
0351:  MOVWF  78
0352:  MOVF   2C,W
0353:  MOVWF  79
0354:  MOVF   2D,W
0355:  MOVWF  7A
0356:  RETURN
.................... } 
....................  
.................... /* 
....................  * ds1820_configure(int8 TH, int8 LH, int8 config) 
....................  * Description: writes configuration data to the DS18x20 device 
....................  * Arguments: alarm trigger high, alarm trigger low, configuration 
....................  */ 
....................  
.................... void ds18b20_configure(int8 TH, int8 TL, int8 config) { 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0x4E);            //Write to scratchpad 
....................     onewire_write(TH); 
....................     onewire_write(TL); 
....................     onewire_write(config); 
.................... } 
....................  
.................... #endif /*DS1820_C*/ 
....................  
....................  
....................  
.................... #include <DS18B20.c> 
.................... #ifndef DS18B20_C 
.................... #define DS18B20_C 
.................... #include "one_wire_td.c" 
.................... float ds18b20_read(); 
.................... void ds18b20_configure(int8 TH, int8 TL, int8 config); 
....................  
.................... /* 
....................  * ds1820_read() 
....................  * Description: reads the ds18x20 device on the 1-wire bus and returns 
....................  *              the temperature 
....................  */ 
....................   
.................... float ds18b20_read() { 
....................     int8 busy=0, temp1, temp2; 
....................     signed int16 temp3; 
....................     float result; 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0x44);            //Start temperature conversion 
....................     while(busy == 0)                //Wait while busy (bus is low) 
....................         busy = onewire_read(); 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0xBE);            //Read scratchpad 
....................     temp1 = onewire_read(); 
....................     temp2 = onewire_read(); 
....................     temp3 = make16(temp2, temp1); 
....................      //result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution 
....................     result = (float) temp3 / 16.0;    //Calculation for DS18B20 with 0.1 deg C resolution 
....................     delay_ms(200);     // 
....................     return(result); 
.................... } 
....................  
.................... /* 
....................  * ds1820_configure(int8 TH, int8 LH, int8 config) 
....................  * Description: writes configuration data to the DS18x20 device 
....................  * Arguments: alarm trigger high, alarm trigger low, configuration 
....................  */ 
....................  
.................... void ds18b20_configure(int8 TH, int8 TL, int8 config) { 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0x4E);            //Write to scratchpad 
....................     onewire_write(TH); 
....................     onewire_write(TL); 
....................     onewire_write(config); 
.................... } 
....................  
.................... #endif /*DS1820_C*/ 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
....................  
.................... void _Delay(char time); 
.................... void main() 
*
05E6:  MOVF   03,W
05E7:  ANDLW  1F
05E8:  MOVWF  03
05E9:  BSF    03.5
05EA:  BCF    08.0
05EB:  BCF    03.5
05EC:  BSF    08.0
05ED:  BSF    03.5
05EE:  BSF    03.6
05EF:  MOVF   09,W
05F0:  ANDLW  C0
05F1:  MOVWF  09
05F2:  BCF    03.6
05F3:  BCF    1F.4
05F4:  BCF    1F.5
05F5:  MOVLW  00
05F6:  BSF    03.6
05F7:  MOVWF  08
05F8:  BCF    03.5
05F9:  CLRF   07
05FA:  CLRF   08
05FB:  CLRF   09
05FC:  BCF    03.7
.................... { 
....................    float NhietDo; 
....................    lcd_init(); 
05FD:  BCF    03.6
05FE:  GOTO   0E5
....................   // lcd_putc('\f'); 
....................    lcd_gotoxy(1,1); 
05FF:  MOVLW  01
0600:  MOVWF  33
0601:  MOVWF  34
0602:  CALL   11F
....................    printf(lcd_putc,"HTGS MOI TRUONG"); 
0603:  MOVLW  0C
0604:  BSF    03.6
0605:  MOVWF  0D
0606:  MOVLW  00
0607:  MOVWF  0F
0608:  BCF    03.6
0609:  CALL   166
....................    lcd_gotoxy(1,2); 
060A:  MOVLW  01
060B:  MOVWF  33
060C:  MOVLW  02
060D:  MOVWF  34
060E:  CALL   11F
....................    printf(lcd_putc,"GVHD:D.THI.TU.MY"); 
060F:  MOVLW  14
0610:  BSF    03.6
0611:  MOVWF  0D
0612:  MOVLW  00
0613:  MOVWF  0F
0614:  BCF    03.6
0615:  CALL   166
....................    _Delay(50); 
0616:  MOVLW  32
0617:  MOVWF  25
0618:  GOTO   1BC
....................    lcd_putc('\f'); 
0619:  MOVLW  0C
061A:  MOVWF  32
061B:  CALL   142
....................    NhietDo = ds18b20_read(); 
061C:  CALL   21D
061D:  MOVF   7A,W
061E:  MOVWF  24
061F:  MOVF   79,W
0620:  MOVWF  23
0621:  MOVF   78,W
0622:  MOVWF  22
0623:  MOVF   77,W
0624:  MOVWF  21
....................    while(TRUE) 
....................    {     
....................       NhietDo = ds18b20_read(); 
0625:  CALL   21D
0626:  MOVF   7A,W
0627:  MOVWF  24
0628:  MOVF   79,W
0629:  MOVWF  23
062A:  MOVF   78,W
062B:  MOVWF  22
062C:  MOVF   77,W
062D:  MOVWF  21
....................       lcd_gotoxy(1,1); 
062E:  MOVLW  01
062F:  MOVWF  33
0630:  MOVWF  34
0631:  CALL   11F
....................       printf(lcd_putc,"T1=%3.2f",NhietDo);  
0632:  MOVLW  54
0633:  MOVWF  32
0634:  CALL   142
0635:  MOVLW  31
0636:  MOVWF  32
0637:  CALL   142
0638:  MOVLW  3D
0639:  MOVWF  32
063A:  CALL   142
063B:  MOVLW  02
063C:  MOVWF  04
063D:  MOVF   24,W
063E:  MOVWF  28
063F:  MOVF   23,W
0640:  MOVWF  27
0641:  MOVF   22,W
0642:  MOVWF  26
0643:  MOVF   21,W
0644:  MOVWF  25
0645:  MOVLW  02
0646:  MOVWF  29
0647:  GOTO   43A
....................       lcd_putc(223); 
0648:  MOVLW  DF
0649:  MOVWF  32
064A:  CALL   142
....................       lcd_putc('C'); 
064B:  MOVLW  43
064C:  MOVWF  32
064D:  CALL   142
....................       printf("%3.2f",NhietDo); 
064E:  MOVLW  02
064F:  MOVWF  04
0650:  MOVF   24,W
0651:  MOVWF  28
0652:  MOVF   23,W
0653:  MOVWF  27
0654:  MOVF   22,W
0655:  MOVWF  26
0656:  MOVF   21,W
0657:  MOVWF  25
0658:  MOVLW  02
0659:  MOVWF  29
065A:  GOTO   521
065B:  GOTO   625
....................        
....................  } 
....................  } 
.................... void _Delay(char time) 
065C:  SLEEP
.................... { 
....................    int i; 
....................    for(i=0;i<time;i++) 
*
01BC:  CLRF   26
01BD:  MOVF   25,W
01BE:  SUBWF  26,W
01BF:  BTFSC  03.0
01C0:  GOTO   1C6
....................    { 
....................       delay_ms(100);//tao tre 0.1s 
01C1:  MOVLW  64
01C2:  MOVWF  33
01C3:  CALL   01D
01C4:  INCF   26,F
01C5:  GOTO   1BD
....................    } 
01C6:  BCF    0A.3
01C7:  BCF    0A.4
01C8:  GOTO   619 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
